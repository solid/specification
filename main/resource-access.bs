Authenticated Resource Access {#resource-access}
================================================

Issue: Write introduction to the Authenticated Resource Access section.

## Hypertext Transfer Protocol ## {#http}

### Background and Need ### {#http-need}
<em>This section is non-normative.</em>

Solid clients and servers need to exchange data securely over the Internet,
and they do so using the HTTP Web standard.
This section describes in detail
which parts of HTTP must be implemented by clients and servers.

### Required server-side implementation ### {#http-server}

A [=data pod=] MUST be an HTTP/1.1 server [[!RFC7230]][[!RFC7231]].
It SHOULD additionally be an HTTP/2 server [[!RFC7540]]
to improve performance,
especially in cases where individual clients
are expected to send high numbers of successive requests.

A data pod SHOULD use TLS connections
through the `https` URI scheme
in order to secure the communication between clients and servers.
When both `http` and `https` are supported,
all `http` URIs MUST redirect to their `https` counterparts
using a response with a `301` status code and a `Location` header.

A data pod MUST implement the server part
of <cite>HTTP/1.1 Conditional Requests</cite> [[!RFC7232]]
to ensure that updates requested by clients
will only be applied if given preconditions are met.
It SHOULD additionally implement the server part
of <cite>HTTP/1.1 Caching</cite> [[!RFC7234]]
to improve performance.
A data pod MAY implement the server part
of <cite>HTTP/1.1 Range Requests</cite> [[!RFC7233]]
to further improve performance for large representations.

A data pod MUST implement the server part
of <cite>HTTP/1.1 Authentication</cite> [[!RFC7235]].
When a client does not provide valid credentials
when requesting a resource that requires it (see [[#webid]]),
the data pod MUST send a response with a `401` status code
(unless `404` is preferred for security reasons).

A Solid server MUST reject `PUT`, `POST` and `PATCH` requests without the
`Content-Type` header with a status code of `400`.
[[Source](https://github.com/solid/specification/issues/70#issuecomment-535499628)]

### Required client-side implementation ### {#http-client}

A Solid client MUST be an HTTP/1.1 client [[!RFC7230]][[!RFC7231]].
It MAY additionally be an HTTP/2 client [[!RFC7540]]
to improve performance.

A Solid client MAY implement the client parts of
<cite>HTTP/1.1 Conditional Requests</cite> [[!RFC7232]]
to only trigger updates when certain preconditions are met.
It MAY implement
<cite>HTTP/1.1 Caching</cite> [[!RFC7234]]
and
<cite>HTTP/1.1 Range Requests</cite> [[!RFC7233]]
to improve performance.

A Solid client MUST implement the client part
of <cite>HTTP/1.1 Authentication</cite> [[!RFC7235]]
if it needs to access resources requiring authentication (see [[#webid]]).
When it receives a response with a `403` or `404` status code,
it MAY repeat the request with different credentials.

A Solid client MUST use the `Content-Type` HTTP header in `PUT`, `POST` and
`PATCH` requests [[!RFC7231]].
[[Source](https://github.com/solid/specification/issues/70#issuecomment-547924171)]

## Uniform Resource Identifier ## {#uri}

### Shared slash semantics ### {#uri-slash-semantics}

The slash character in the URI path indicates hierarchical relationship
segments, and enables relative referencing [[!RFC3986]]. The semantics of the
slash character is shared by servers and clients. Paths ending with a slash
denote a container resource.
[[Source](https://github.com/solid/specification/issues/35#issuecomment-547949014)]

If two URIs differ only in the trailing slash, and the server has associated a
resource with one of them, then the other URI MUST NOT correspond to another
resource. Instead, the server MAY respond to requests for the latter URI with
a 301 redirect to the former.
[[Source](https://github.com/solid/specification/issues/107#issuecomment-567482817)].
Behaviour pertaining to authorization MUST proceed this optional redirect
[[Source](https://github.com/solid/specification/issues/107#issuecomment-567454889)]

## Linked Data ## {#linked-data}

### Containment ### {#resource-containment}

Solid has the notion of containers to represent a collection of linked
resources to help with resource discovery and lifecycle management.

There is a 1-1 correspondence between containment triples and relative
reference within the path name hierarchy.
[[Source](https://github.com/solid/specification/issues/98#issuecomment-547506617)].
It follows that all resources are discoverable from a container and that it is
not possible to create orphan resources.
[[Source](https://github.com/solid/specification/issues/97#issuecomment-547459396)]

The representation and behaviour of containers in Solid corresponds to LDP
Basic Container and MUST be supported.
[[Source](https://github.com/solid/specification/issues/47#issuecomment-561675764)]

Server MUST create intermediate containers and include corresponding
containment triples in container representations derived from the URI path
component of `PUT`, `POST` and `PATCH` requests.
[[Source](https://github.com/solid/specification/issues/68#issuecomment-561690124)]

### Persistence ### {#uri-persistence}
<em>This section is non-normative.</em>

Servers should not re-use URIs, regardless of the mechanism by which resources
are created. Certain specific cases exist where URIs may be reinstated when it
identifies the same resource, but only when consistent with Web architecture's
<cite><a href="https://www.w3.org/TR/webarch/#URI-persistence">URI
persistence</a></cite> [[!WEBARCH]].
[[Source](https://github.com/solid/specification/issues/46#issuecomment-589619372)]

Note:
Servers that wish to disable URI re-use may want to use the `410` status
code.

### Resource type heuristics ### {#resource-type-heuristics}

Servers MUST apply the following heuristics to determine a request's resource
type
[[Source](https://github.com/solid/specification/issues/128#issuecomment-573033297)].

<table id="heuristics-resource-type">
  <caption>Heuristics to determine a resource type</caption>
  <thead>
    <tr>
      <th>`Slug`</th>
      <th>`Link`</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`foo/`</td>
      <td>No `Link` header.</td>
      <td>Create a container with `foo/` appended to the request-URI.</td>
    </tr>
    <tr>
      <td><code>foo/</code></td>
      <td>`Link` header with `rel="type"` targeting a valid LDP container type.</td>
      <td>Create a container with `foo/` appended to the request-URI.</td>
    </tr>
    <tr>
      <td><code>foo/</code></td>
      <td>`Link` header without a `rel="type"` targeting a valid LDP container type.</td>
      <td>Create a resource with `foo` appended to the request-URI, check for
      consistency.</td>
    </tr>
    <tr>
      <td>`foo`</td>
      <td>No `Link` header.</td>
      <td>Create a resource with `foo` appended to the request-URI, check for
      consistency.</td>
    </tr>
    <tr>
      <td>`foo`</td>
      <td>`Link` header with `rel="type"` targeting a valid LDP container type.</td>
      <td>Create a container with `foo/` appended to the request-URI.</td>
    </tr>
    <tr>
      <td>`foo`</td>
      <td>`Link` header without a `rel="type"` targeting a valid LDP container type.</td>
      <td>Create a resource with `foo` appended to the request-URI, check for
      consistency.</td>
    </tr>
    <tr>
      <td><em>none</em></td>
      <td>No `Link` header.</td>
      <td>Create a resource with server determined identifier appended to the
      request-URI, check for consistency.</td>
    </tr>
    <tr>
      <td><em>none</em></td>
      <td>`Link` header with `rel="type"` targeting a valid LDP container type.</td>
      <td>Create a container with server determined identifier appended to the
      request-URI.</td>
    </tr>
    <tr>
      <td><em>none</em></td>
      <td>`Link` header without a `rel="type"` targeting a valid LDP container type.</td>
      <td>Create a resource with server determined identifier appended to the
      request-URI, check for consistency.</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td colspan="3">
The semantics of slashes in URI paths are shared ([[#uri-slash-semantics]]).

The consistency of a request is determined by checking its data, metadata and
URI
[[Source](https://github.com/solid/specification/issues/40#issuecomment-566995240)].
      </td>
    </tr>
  </tfoot>
</table>


## Auxiliary Resources ## {#rm}

### Background and Need ### {#ar-need}
<em>This section is non-normative.</em>

An auxiliary resource may provide supplementary information about a given
Solid resource, or affect how that resource and others associated with it
are processed, served, or interpreted. Different auxiliary resource types
provide different capabilities. This section introduces a mechanism for linking
auxiliary resources with regular Solid resources.

Auxiliary resources are needed to influence the configuration, processing, or
interpretation of Solid resources without changing the composition of the
resources themselves. To do so would be undesirable in many cases, and not
possible in others. Auxiliary resources are not meant to replace the ability
of a Solid resource to self-describe.

Examples of auxiliary resources in use include:

<ul>
  <li>A binary JPEG image linked to an auxiliary resource that includes
  information describing that binary JPEG.</li>
  <li>A container linked to an auxiliary resource that includes access control
  statements for that container and the resources that belong to it.</li>
  <li>A resource representation whose shape is constrained by a given ShEx
  schema that links to an auxiliary resource defining that schema.</li>
  <li>A resource with an associated set of configurable parameters links to an
  auxiliary resource where those configurable parameters reside.</li>
</ul>

### Required Server-side Implementation ### {#ar-server}


For any defined auxiliary resource available for a given Solid resource, all
representations of that resource MUST include an HTTP `Link` header pointing to
the location of each auxiliary resource.

The `rel={relation-type}` [[!RFC8288]] will define the relationship to the
target URL in the HTTP `Link` header. URIs are encouraged to indicate Link
relation types.

An auxiliary resource linked with a given Solid resource through an HTTP `Link`
header is considered to be *directly associated* with that resource. It is up
to the server to determine how that association affects processing based on the
auxiliary resource type.

A given Solid resource MAY link to zero or more auxiliary resources. A given
Solid resource MUST NOT link to auxiliary resources on a different server under
a different authority.

Issue: Is MUST NOT too strong?
[Related Issue](https://github.com/solid/specification/issues/176)

Access to different types of auxiliary resources require varying levels of
authorization, which MUST be specified as part of the definition for a given
auxiliary resource type.

An auxiliary resource that resides on a Solid server MUST adhere to the same
interaction model used by other regular Solid resources, except where specified
in the definition of that auxiliary resource type.

### Required Client-side Implementation ### {#ar-client}

#### Discovery of Auxiliary Resources #### {#ar-discovery}

To discover the auxiliary resources directly associated with a given Solid
resource, a Solid client MUST issue a `HEAD` or `GET` request to the target
resource URL and inspect the `Link` headers in the response.

<div class="example">
  <p>
    A client discovers the location of auxiliary resources for [[#ar-wac]] and
    [[#ar-shape]] through a HEAD request on
    `<https://server.example/resource.ttl>:`
  </p>
  <pre>
    HEAD https://server.example/resource.ttl
    `Link: <https://server.example/acls/24986>; rel="http://www.w3.org/ns/solid/terms#acl"`
    `Link: <https://server.example/shapes/85432>; rel="http://www.w3.org/ns/solid/terms#shape"`
  </pre>
  <p>
    A client discovers the [[#ar-wac]] and [[#ar-description]] auxiliary
    resources through a GET request on `<https://server.example/image.png>`:
  </p>
  <pre>
    GET https://server.example/image.png
    `Link: <https://server.example/acls/36789>; rel="http://www.w3.org/ns/solid/terms#acl"`
    `Link: <https://server.example/desc/08744>; rel="https://www.w3.org/ns/iana/link-relations/relation#describedby"`
  </pre>
</div>

#### Discovery of Annotated Solid Resources #### {#ar-annotated}

Certain auxiliary resource types MAY require the auxiliary resource to link back
to the Solid resource it is directly associated with, via HTTP `Link` headers.
In these instances, the link relation `rel=describes` or
`rel=https://www.w3.org/ns/iana/link-relations/relation#describes` MUST be used.

Issue: Is MUST too strong, as opposed to encouraging via SHOULD instead?
[Related Issue](https://github.com/solid/data-interoperability-panel/issues/37)

<div class="example">
  <p>
    A [[#ar-description]] auxiliary resource
    `<https://server.example/desc/08744>` is directly associated with and
    describes `<https://server.example/image.png>`. A client that performs a GET
    request on `<https://server.example/desc/08744>` would discover the
    following relation in the `Link` headers returned in the response.
  </p>
  <pre>
    GET https://server.example/desc/08744
    `Link: <https://server.example/image.png>; rel="https://www.w3.org/ns/iana/link-relations/relation#describes"`
  </pre>
</div>

### Reserved Auxiliary Resource Types ### {#ar-reserved}

The following table lists [[#ar-reserved]] and the associated link relation URIs
that are used for discovery. Other auxiliary types and relations may also be
used, and may be added to the reserved set in the future.

<table class="data" align="left">
  <colgroup class="header"></colgroup>
  <colgroup span="2"></colgroup>
  <thead>
    <tr>
      <th>Auxiliary Type</th>
      <th>Link Relation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[#ar-wac]]</td>
      <td>```"acl"``` or ```http://www.w3.org/ns/solid/terms#acl```</td>
    </tr>
    <tr>
      <td>[[#ar-description]]</td>
      <td>```"describedby"``` or
```https://www.w3.org/ns/iana/link-relations/relation#describedby```</td>
    </tr>
    <tr>
      <td>[[#ar-shape]]</td>
      <td>```http://www.w3.org/ns/solid/terms#shape```</td>
    </tr>
  </tbody>
</table>

Issue: Agree on specific link relation URIs to use for auxiliary types
[Related Issue](https://github.com/solid/specification/issues/172)

#### Web Access Control #### {#ar-wac}

ACL resources as defined by [[#wac]] MUST be supported as an auxiliary
type by Solid servers.

The ACL auxiliary resource directly associated with a given resource is
discovered by the client via the `rel="acl"` `Link` relation in a `Link` header.

Note: Consider moving some of this information to [[#wac]]

A given Solid resource MUST NOT be directly associated with more than one ACL
auxiliary resource. A given ACL auxiliary resource MUST NOT be directly
associated with more than one Solid resource.

To discover, read, create, or modify an ACL auxiliary resource, an
[acl:agent](https://github.com/solid/web-access-control-spec#describing-agents)
MUST have
[acl:Control](https://github.com/solid/web-access-control-spec#aclcontrol)
privileges per the
[ACL inheritance algorithm](https://github.com/solid/web-access-control-spec#acl-inheritance-algorithm)
on the resource directly associated with it.

An ACL auxiliary resource MUST be deleted by the Solid server when the resource
it is directly associated with is also deleted and the Solid server is
authoritative for both resources.

A Solid server SHOULD sanity check ACL auxiliary resources upon creation or
update to restrict invalid changes, such as by performing shape validation
against authorization statements therein.

#### Resource Description #### {#ar-description}

Note: Consider where there are any common parameters that would be
ubiquitous across resource descriptions that should be defined as part of the
specification.

Resource description is a general mechanism to provide descriptive metadata for
a given resource. It MUST be supported as an auxiliary type by Solid
servers.

The Descriptive auxiliary resource directly associated with a given resource is
discovered by the client via the `rel="describedby"` `Link` relation in a `Link`
header. Conversely, the resource being described by a Descriptive auxiliary
resource is discovered by the client via the `rel="describes"` `Link` relation
in a `Link` header.

Issue: Consider whether a given Solid resource should be allowed to have
multiple resource description auxiliary resources.
[Related Issue](https://github.com/solid/specification/issues/173)

A given Solid resource MUST NOT be directly associated with more than one
Descriptive auxiliary resource.

Issue: Determine what the default permissions should be on resource description
auxiliary resources, or whether we should have them at all.
[Related Issue](https://github.com/solid/specification/issues/174)

To create or modify a Descriptive auxiliary resource, a given
[acl:agent](https://github.com/solid/web-access-control-spec#describing-agents)
MUST have
[acl:Write](https://github.com/solid/web-access-control-spec#aclcontrol)
privileges per the
[ACL inheritance algorithm](https://github.com/solid/web-access-control-spec#acl-inheritance-algorithm)
on the resource directly associated with it.

To discover or read a Descriptive auxiliary resource, an
[acl:agent](https://github.com/solid/web-access-control-spec#describing-agents)
MUST have
[acl:Read](https://github.com/solid/web-access-control-spec#aclcontrol)
privileges per the
[ACL inheritance algorithm](https://github.com/solid/web-access-control-spec#acl-inheritance-algorithm)
on the resource directly associated with it.

An Descriptive auxiliary resource MUST be deleted by the Solid server when the
resource it is directly associated with is also deleted and the Solid server is
authoritative for both resources.

#### Shape Validation #### {#ar-shape}

Shape Validation auxiliary resources as defined by (link to shape validation)
SHOULD be supported as an auxiliary type by Solid servers.

The Shape validation auxiliary resource directly associated with a given
resource
is discovered by the client via the `rel=http://www.w3.org/ns/solid/terms#shape`
`Link` relation in a `Link` header. Conversely, the resource being described by
a Shape validation auxiliary resource is discovered by the client via the
`rel=describes` `Link` relation in a `Link` header.

Note: Consider moving some of this information to the Shape Validation section

A given Solid resource MUST NOT be directly associated with more than one
Shape Validation auxiliary resource.

Issue: Determine what the default permissions should be on shape validation
auxiliary resources, or whether we should have them at all.
[Related Issue](https://github.com/solid/specification/issues/174)

To create or modify a Shape validation auxiliary resource, an
[acl:agent](https://github.com/solid/web-access-control-spec#describing-agents)
MUST have
[acl:Write](https://github.com/solid/web-access-control-spec#aclcontrol)
privileges per the
[ACL inheritance algorithm](https://github.com/solid/web-access-control-spec#acl-inheritance-algorithm)
on the resource directly associated with it.

To discover or read a Shape validation auxiliary resource, an
[acl:agent](https://github.com/solid/web-access-control-spec#describing-agents)
MUST have
[acl:Read](https://github.com/solid/web-access-control-spec#aclcontrol)
privileges per the
[ACL inheritance algorithm](https://github.com/solid/web-access-control-spec#acl-inheritance-algorithm)
on the resource directly associated with it.

A Shape validation auxiliary resource MUST be deleted by the Solid server when
the resource it is directly associated with is also deleted and the Solid server
is authoritative for both resources.

Issue: Provide a shape to validate a shape validation auxiliary resource. May
include the shape language, shape url, and any additional parameters to be used
in shape validation by the server implementation.

A Solid server SHOULD sanity check Shape validation auxiliary resources upon
creation or update to restrict invalid changes.

## WebID ## {#webid}

Issue: Explain inline that agents accessing non-public Solid resources
  need to authenticate with a WebID, which is a URL
  pointing to a document with an RDF representation.


### WebID-OIDC ### {#webid-oidc}

Issue: Write WebID-OIDC section.

Draft:
A Solid data pod MUST conform to the WebID-OIDC specification [[!WEBID-OIDC]].


### WebID-TLS ### {#webid-tls}

Issue: Write WebID-TLS section.

Draft:
A Solid data pod MAY conform to the WebID-TLS specification [[!WEBID-TLS]].


## Web Access Control ## {#wac}

Issue: Write Web Access Control section.

Draft:
A Solid data pod MUST conform to the Web Access Control specification [[!WAC]].

A resource can advertise an ACL document that is directly associated by using
the HTTP `Link` header with a `rel` value of `acl`.
[[Source](https://github.com/solid/specification/issues/31#issuecomment-548360553)]

In the event that a server can't apply an ACL to a resource, it MUST deny
access.
[[Source](https://github.com/solid/specification/issues/130#issue-532777017)]

## Cross-Origin Resource Sharing ## {#cors}

### Background and Need ### {#cors-need}
<em>This section is non-normative.</em>

[=Solid apps=] typically access data from multiple sources.
However,
Web browsers by default prevent apps that run on one origin
from accessing data on other origins.
This cross-origin protection is a security mechanism
that ensures malicious websites cannot simply read
your profile or banking details from other websites.
However, this reasonable default poses a problem
even for benevolent Solid apps,
which might have good reasons to access data from different places.
For instance,
a Solid app at `https://app.example/`
would be prevented from accessing data on
`https://alice-data-pod.example/` or `https://bob-data-pod.example/`,
even when Alice and Bob have given the user of the app
their permission to see some of their data.

For cases where the other origins
have their own access protection mechanism—
[like within Solid](#wac)—
the browser's built-in cross-origin protection
is actually an obstacle rather than a feature.
After all,
[=data pods=] already ensure through access control
that certain documents can only be accessed
by specific people or applications.
Preventively blocking apps from different origins
thus introduces an unnecessary barrier.

Fortunately,
Web servers can indicate to the browser
that certain documents do not require cross-origin protection.
This mechanism to selectively disable that protection
is called *Cross-Origin Resource Sharing* or *CORS* [[FETCH]].
By responding to browser requests
with a specific combination of HTTP headers,
servers can indicate which actions are allowed for a given resource.
For a Solid data pod,
the goal is to allow *all* actions on the CORS level,
such that the deeper [access control layer](#wac)
can exert full control over the app's allowed permissions.
The next section describes how to achieve this
through the right HTTP header configuration.


### Required server-side implementation ### {#cors-server}

A [=data pod=] MUST implement the CORS protocol [[!FETCH]]
such that, to the extent possible,
the browser allows Solid apps
to send any request and combination of request headers
to the data pod,
and the Solid app can read any response and response headers
received from the data pod.
If the data pod wishes to block access to a resource,
this MUST NOT happen via CORS
but MUST instead be communicated to the Solid app in the browser
through HTTP status codes such as
`401`, `403`, or `404` [[!RFC7231]].

Note: Since the CORS protocol is part of a Living Standard,
it might be changed at any point,
which might necessitate changes to data pod implementations
for continued prevention of undesired blocking.
A [proposal](https://github.com/whatwg/fetch/issues/878) to mitigate this
has been suggested.

Concretely,
whenever a data pod receives an HTTP request
containing a valid `Origin` header [[!RFC6454]],
the server MUST respond with the appropriate `Access-Control-*` headers
as specified in the CORS protocol [[!FETCH]].
In particular,
the data pod MUST set the `Access-Control-Allow-Origin` header
to the valid `Origin` value from the request
and list `Origin` in the `Vary` header value.
The data pod MUST make all used response headers readable for the Solid app
through `Access-Control-Expose-Headers`
(with the possible exception of the `Access-Control-*` headers themselves).
A data pod MUST also support the HTTP `OPTIONS` method [[!RFC7231]]
such that it can respond appropriately to CORS preflight requests.

Careful attention is warranted,
especially because of the many edge cases.
For instance,
data pods SHOULD explicitly enumerate
all used response headers under `Access-Control-Expose-Headers`
rather than resorting to `*`,
which does not cover all cases (such as credentials mode set to `include`).
Data pods SHOULD also explicitly list `Accept` under `Access-Control-Allow-Headers`,
because values longer than 128 characters
(not uncommon for RDF-based Solid apps)
would otherwise be blocked,
despite shorter `Accept` headers being allowed without explicit mention.
